import requests


def call_llm_api(prompt, api_key, temperature=0.7,max_retries=10, timeout=200):
    """
    The function `call_llm_api` sends a POST request to ChatGPT API endpoint with given prompt.
    
    :param prompt: The `prompt` parameter in the `call_llm_api` function is a string that represents the
    input text or message that will be used as a prompt for the language model API. This prompt will be
    used to generate a response from the model specified in the `data` dictionary
    :param api_key: The `api_key` parameter in the `call_llm_api` function is used to authenticate your
    API requests. 
    :param max_retries: maximum number of times the API call will be retried in case of a failure.
    :param timeout: The `timeout` parameter in the `call_llm_api` function specifies the maximum number
    of seconds the function will wait for a response from the API before raising a timeout error. 
    :return: The function `call_llm_api` returns the completion message generated by the API if the
    response status code is 200. If there is an error in the response, it returns an error message
    including the status code and response text. If there is a network-related error during the request,
    it returns a message indicating a network error. If the maximum number of retries is reached without
    a successful response,
    """
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    data = {
        # 'model': 'gpt-3.5-turbo-1106',
        'model': 'gpt-4',
        'temperature': temperature,
        "messages": [            {
                "role": "user",
                "content": prompt
            }
        ]
    }

    for _ in range(max_retries):
        try:
            response = requests.post('https://api.kwwai.top/v1/chat/completions', headers=headers, json=data, timeout=timeout)
            if response.status_code == 200:
                return response.json()["choices"][0]["message"]["content"]
            else:
                return f"Error: {response.status_code}, {response.text}"
        # except requests.Timeout:
        #     print("Request timed out, retrying...")
        except requests.RequestException as e:
            # 其他网络相关错误可以在这里处理
            return f"Network error: {e}"

    return "Error: Maximum retries reached"
# with open("/home/luzhenye/PythonProject/gpt/prompt.txt","r") as f:
#     data = f.read()

# response = call_llm_api(f"{data}请回答这个逻辑链条和什么行业相关，包含什么金融要素，并且根据这个list中的行业、金融要素和逻辑关系仿写一个行业相同的句子，仿写的句子要和上述的金融要素相近，逻辑关系相似，只输出仿写句子以及仿写句子的逻辑链条，就像这个list一样。注意仿句的行业要和上述的相同","sk-QeiIJwcjqnhybuSeBbC0F27eEc0b42529a4410194b362bBb")
# print(response)